--this controls player movement, storing which direction keys are pressed and the direction in which they are pressed.
function curDir(n)
  if n == 'w' then    return player.curdir .. 'u'
  elseif n == 's' then    return player.curdir .. 'd'
  elseif n == 'a' then    return player.curdir .. 'l'
  elseif n == 'd' then    return player.curdir .. 'r'
  else return player.curdir end
end
function curDirRel(n)
  if n == 'w' then    return player.curdir:gsub('u','')
  elseif  n == 's' then    return player.curdir:gsub('d','')
  elseif  n == 'a' then    return player.curdir:gsub('l','')
  elseif  n == 'd' then    return player.curdir:gsub('r','')
  else  return player.curdir end
end
--this assigns the players direction and movement based on 'player.curdir'
function movePlayer(this,dt)
	local xx,yy
	if this==player then xx,yy=x,y else xx,yy=this.posX,this.posY end
  if this.curdir:sub(-1) == 'u' then
    if string.match(this.noGo,'u')~='u' then yy = yy - (this.speed * dt) end
    this.dir = 'u'
  elseif this.curdir:sub(-1) == 'd' then
    if  string.match(this.noGo,'d')~='d' then yy = yy + (this.speed * dt) end
    this.dir = 'd'
  elseif this.curdir:sub(-1) == 'l' then
    if string.match(this.noGo,'l')~='l' then xx = xx - (this.speed * dt) end
    this.dir = 'l'
  elseif this.curdir:sub(-1) == 'r' then
    if string.match(this.noGo,'r')~='r' then xx = xx + (this.speed * dt) end
    this.dir='r'
  end
	if this==player then x,y=xx,yy else this.posX,this.posY=xx,yy end
  if this.curdir~='' then
    this.mov = this.mov:gsub(this.mov:sub(1,1),'m')
  else
    this.mov = 's1'
  end
end
--this determines the animation to display for the player (standing, moving)
function walk(this,movThis)
  wnum=tonumber(this.mov:sub(2,2))
  local direct=this.dir
  if this.mov:sub(1,1) == 'm' then
    if wnum <= 5 then
      direct=direct..'1'
      this.mov = this.mov:gsub(wnum,wnum+1)
    elseif wnum < 10 then
      direct=direct..'2'
      this.mov = this.mov:gsub(wnum,wnum+1)
    end
  end
  return movThis[direct]
end
function drawPlayer()
	love.graphics.setColor(175,125,125)
	heart.posX=0
	for i=1,playerData.health do
		heart.pic=nil
		heart.posX=heart.posX+width/25
		if health>=i then
			heart.pic=heart.full
		elseif health>=i-.5 then
			heart.pic=heart.half
		else
			heart.pic=heart.no
		end
		drawObj(heart,-1)
	end
	local pWidth,pHeight = img:getDimensions()
	local sWidth,sHeight=sword.wid/sword.width,sword.hei/sword.height
	love.graphics.setColor(pRed,300-pRed,300-pRed)
	love.graphics.push()
	if playerData.weapon~=0 and player.dir=='u' then
		love.graphics.translate(x+w/2,y+sword.hei*.8-sword.add)
		love.graphics.rotate(sword.rotation+math.pi/25)
	end
	if playerData.weapon~=0 and player.dir=='l' then
		love.graphics.translate(x+sword.wid/3+sword.add,y+sword.hei*.85)
		love.graphics.rotate(sword.rotation+math.pi/25)
	end
	if playerData.weapon~=0 and player.dir=='r' then
		love.graphics.translate(x+w-sword.wid/3-sword.add,y+sword.hei*.85)
		love.graphics.rotate(sword.rotation-math.pi/25)
	end
	if playerData.weapon~=0 and player.dir~='d' then love.graphics.draw(sword.pic,-sword.wid/2,0,0,sWidth,sHeight) end
	love.graphics.pop()
 	love.graphics.draw(img,x,y,0,w/pWidth,h/pHeight)
	love.graphics.push()
	if playerData.weapon~=0 and player.dir=='d' then
		love.graphics.translate(x+w/2,y+sword.hei*.95+sword.add)
		love.graphics.rotate(sword.rotation-math.pi/25)
		love.graphics.draw(sword.picHand,-sword.wid/2,0,0,sWidth,sHeight) 
	end
	love.graphics.pop()
	love.graphics.setColor(bg1,bg2,bg3)
end
function swingSword(init)
	if init then
		if spindex<playerData.swordCool or playerData.weapon==0 then return 
		else 
			if player.dir~='d' and player.dir~='u' then spindex=0 else spindex=-3 end
		end 
	else
	if player.dir=='r' then sword.rotation=sword.rotation+(math.pi/6) sword.add=width/80
	elseif player.dir=='l' then sword.rotation=sword.rotation-(math.pi/6) sword.add=width/80
	elseif player.dir=='d' then sword.hei=sword.hei-(height/28) sword.add=sword.add+height/32 sword.rotation=sword.rotation-math.pi/200
	elseif player.dir=='u' then sword.add=-1*sword.add+height/40 sword.rotation=sword.rotation-math.pi/40
	end end
end
function hurtMe()
	if hurt==0 then hurt=20 health=health-.5 if health==0 then killMe() end end
	if hurt>16 then pRed=250 elseif hurt>12 then pRed=150 elseif hurt>8 then pRed=150 elseif hurt>4 then pRed=250 elseif hurt>0 then pRed=150 end
	hurt=hurt-1
end
function killMe()
	love.event.quit('restart')
end
--these are the players
function loadPlayer(whichUko)
	heart={}
	heart.full=love.graphics.newImage('playerImages/fullHeart.png')
	heart.half=love.graphics.newImage('playerImages/halfHeart.png')
	heart.no=love.graphics.newImage('playerImages/noHeart.png')
	heart.wid=width/30
	heart.hei=heart.wid
	heart.posY=width/30
  player={}
  if whichUko == 'hikerDude' then
    player.d=love.graphics.newImage('playerImages/playerDown.png')
    player.d1 = love.graphics.newImage('playerImages/playerDown1.png')
    player.d2 = love.graphics.newImage('playerImages/playerDown2.png')
    player.u = love.graphics.newImage('playerImages/playerUp.png')
    player.u1 = love.graphics.newImage('playerImages/playerUp1.png')
    player.u2 = love.graphics.newImage('playerImages/playerUp2.png')
    player.l = love.graphics.newImage('playerImages/playerLeft.png')
    player.l1 = love.graphics.newImage('playerImages/playerLeftW.png')
    player.l2=player.l
    player.r = love.graphics.newImage('playerImages/playerRight.png')
    player.r1 = love.graphics.newImage('playerImages/playerRightW.png')
    player.r2=player.r
  end
end
